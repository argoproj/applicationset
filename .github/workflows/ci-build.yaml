name: Integration tests
on: 
  push:
    branches:
      - 'master'
  pull_request:
    branches:
      - 'master'

jobs:

  build-docker:
    name: Ensure Docker image builds
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build Docker image
        run: |
          DOCKER_PUSH=false make image

  build-go:
    name: Build & cache Go code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Golang
        uses: actions/setup-go@v1
        with:
          go-version: '1.14.12'
      - name: Restore go build cache
        uses: actions/cache@v1
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-build-v1-${{ github.run_id }}
      - name: Download all Go modules
        run: |
          go mod download
      - name: Compile all packages
        run: make build

  test-go:
    name: Run unit tests for Go packages
    runs-on: ubuntu-latest
    needs:
      - build-go
    steps:
      - name: Create checkout directory
        run: mkdir -p ~/go/src/github.com/argoproj-labs
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create symlink in GOPATH
        run: ln -s $(pwd) ~/go/src/github.com/argoproj-labs
      - name: Setup Golang
        uses: actions/setup-go@v1
        with:
          go-version: '1.14.12'
      - name: Install required packages
        run: |
          sudo apt-get install git -y
      - name: Switch to temporal branch so we re-attach head
        run: |
          git switch -c temporal-pr-branch
          git status
      - name: Fetch complete history for blame information
        run: |
          git fetch --prune --no-tags --depth=1 origin +refs/heads/*:refs/remotes/origin/*
      - name: Add ~/go/bin to PATH
        run: |
          echo "/home/runner/go/bin" >> $GITHUB_PATH
      - name: Add /usr/local/bin to PATH
        run: |
          echo "/usr/local/bin" >> $GITHUB_PATH
      - name: Restore go build cache
        uses: actions/cache@v1
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-build-v1-${{ github.run_id }}
      - name: Setup git username and email
        run: |
          git config --global user.name "John Doe"
          git config --global user.email "john.doe@example.com"
      - name: Download and vendor all required packages
        run: |
          go mod download
      - name: Run all unit tests
        run: make test
      - name: Generate code coverage artifacts
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage
          path: coverage.out
      - name: Generate test results artifacts
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: test-results/

  test-e2e:
    name: Run end-to-end tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        k3s-version: [v1.19.2]
        # k3s-version: [v1.19.2, v1.18.9, v1.17.11, v1.16.15]
    # needs: 
      # - build-go
    env:
      GOPATH: /home/runner/go
      ARGOCD_FAKE_IN_CLUSTER: "true"
      ARGOCD_SSH_DATA_PATH: "/tmp/argo-e2e/app/config/ssh"
      ARGOCD_TLS_DATA_PATH: "/tmp/argo-e2e/app/config/tls"
      ARGOCD_E2E_SSH_KNOWN_HOSTS: "../fixture/certs/ssh_known_hosts"
      ARGOCD_E2E_K3S: "true"
      ARGOCD_IN_CI: "true"
      ARGOCD_E2E_APISERVER_PORT: "8088"
      ARGOCD_SERVER: "127.0.0.1:8088"
    steps:
      - name: Checkout latest Argo CD code
        uses: actions/checkout@v2
        with:
          repository: argoproj/argo-cd
          ref: v1.8.0
          # Pin a specific commit to prevent Argo CD regressions from impacting us
      - name: Setup Golang  
        uses: actions/setup-go@v1
        with:
          go-version: '1.14.2'
      - name: Install K3S
        env:
          INSTALL_K3S_VERSION: ${{ matrix.k3s-version }}+k3s1
        run: |
          set -x
          curl -sfL https://get.k3s.io | sh -
          sudo chmod -R a+rw /etc/rancher/k3s
          sudo mkdir -p $HOME/.kube && sudo chown -R runner $HOME/.kube
          sudo k3s kubectl config view --raw > $HOME/.kube/config
          sudo chown runner $HOME/.kube/config
          kubectl version
      - name: Restore go build cache
        uses: actions/cache@v1
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-build-v1-${{ github.run_id }}
      - name: Add ~/go/bin to PATH
        run: |
          echo "/home/runner/go/bin" >> $GITHUB_PATH
      - name: Add /usr/local/bin to PATH
        run: |
          echo "/usr/local/bin" >> $GITHUB_PATH
      - name: Download Go dependencies
        run: |
          go mod download
          go get github.com/mattn/goreman
      - name: Install all tools required for building & testing
        run: |
          make install-test-tools-local
      - name: Setup git username and email
        run: |
          git config --global user.name "John Doe"
          git config --global user.email "john.doe@example.com"
      - name: Pull Docker image required for tests
        run: |
          docker pull quay.io/dexidp/dex:v2.25.0
          docker pull argoproj/argo-cd-ci-builder:v1.0.0
          docker pull redis:5.0.10-alpine
      - name: Create target directory for binaries in the build-process
        run: |
          mkdir -p dist
          chown runner dist
      - name: Run Argo CD E2E server and wait for it being available
        timeout-minutes: 30
        run: |
          set -x
          # Add 8081 as an exposed port to Argo CD test container, to allow us to access repo server for git generators
          # (this should be upstreamed, to prevent it from breaking here)
          sed -i 's/4000:4000/4000:4000 -p 8081:8081/' Makefile
          # Something is weird in GH runners -- there's a phantom listener for
          # port 8080 which is not visible in netstat -tulpen, but still there
          # with a HTTP listener. We have API server listening on port 8088
          # instead.
          make start-e2e-local 2>&1 | sed -r "s/[[:cntrl:]]\[[0-9]{1,3}m//g" > /tmp/e2e-server.log &
          count=1
          until curl -f http://127.0.0.1:8088/healthz; do
            sleep 10;
            if test $count -ge 60; then
              echo "Timeout"
              exit 1
            fi
            count=$((count+1))
          done
      - name: Checkout latest applicationsets code
        uses: actions/checkout@v2
        with:
          path: applicationsets
      - name: Run E2E test suite
        run: |
          set -x
          cd "$GITHUB_WORKSPACE/applicationsets"
          # TODO: re-enable this, or create a validation that ensures this is updated.
          # make manifests
          kubectl apply -f manifests/crds/argoproj.io_applicationsets.yaml
          make build
          make start-e2e 2>&1 | tee /tmp/appset-e2e-server.log &
          make test-e2e 
      - name: Upload e2e-server logs
        uses: actions/upload-artifact@v2
        with:
          name: appset-e2e-server-k8s${{ matrix.k3s-version }}.log
          path: /tmp/appset-e2e-server.log
        if: ${{ failure() }}
